/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   app-media-recorder.html
 */

/// <reference path="../polymer/types/polymer.d.ts" />

/**
 * `app-media-recorder` is an element that, when configured with a media stream,
 * generates recordings based on that stream and produces them as blobs for further
 * consumption and processing.
 *
 * NOTE: As of today (January 6th, 2017), Media Recorder API is only supported in
 * Chrome, Firefox and Opera. This element will politely neglect to register itself
 * in browsers that do not support the Media Recorder API.
 *
 * Some polyfill-esque libraries (like
 * [this one](https://www.webrtc-experiment.com/msr/)) exist at the time of this
 * writing, but do not work as drop-in substitutes. If you have a polyfill that
 * you consider to be a suitable substitute, load it first and ensure that
 * `window.MediaRecorder` points to the correct constructor. For example:
 *
 * ```
 * <script src="/some/path/MediaStreamRecorder.js"></script>
 * <script>
 *   // Substitute the MediaStreamRecorder constructor for MediaRecorder before
 *   // <app-media-recorder> is loaded:
 *   window.MediaRecorder = MediaStreamRecorder;
 * </script>
 * <link rel="import" href="/bower_components/app-media/app-media-recorder.html">
 * ```
 */
interface AppMediaRecorderElement extends Polymer.Element {

  /**
   * The input media stream to base the recordings off of.
   */
  stream: MediaStream|null;

  /**
   * A reference to the media recorder that is used to generate
   * recordings of the stream.
   */
  readonly recorder: MediaRecorder|null;

  /**
   * The timeslice to use when recording the stream with the media
   * recorder.
   */
  timeslice: number|null|undefined;

  /**
   * The duration of the recording, in milliseconds. If set to a value
   * greater than 0, the recording will automatically end after the
   * configured amount of time (unless there is some manual
   * intervention). If set to 0 (the default), recording will continue
   * until manually stopped (or your device melts).
   */
  duration: number|null|undefined;

  /**
   * The computed mime type for the output recording.
   */
  readonly mimeType: string|null|undefined;

  /**
   * If true, the computed mime type will be video/mpeg.
   */
  mpeg: boolean|null|undefined;

  /**
   * If a value is given, the computed mime time will include a suffix
   * specifying the value as a specific codec e.g., for vp8, the mime
   * type will be video/webm\;codecs=vp8.
   */
  codecs: string|null|undefined;

  /**
   * The time elapsed since the recorder began recording, in
   * milliseconds.
   */
  readonly elapsed: number|null|undefined;

  /**
   * A blob for the most recently completed recording.
   */
  readonly data: Blob|null;

  /**
   * When set to true, the recorder will start recording. When set to false,
   * the recorder will stop recording and data will be updated as the
   * recording becomes available. Calling `start` will cause this property
   * to be set to true. Calling `stop` will cause this property to be set to
   * false.
   */
  recording: boolean|null|undefined;

  /**
   * When set to true, the recorder will only dispatch `app-media-recorder-chunk`
   * events, and will not keep a local cache of the data chunks that have been
   * recorded. A consequence of this is that a final `data` Blob will not be
   * available when the recording has finished.
   */
  disableBlobCache: boolean|null|undefined;

  /**
   * The desired bitrate for the audio tracks of the recorded stream.
   * Set to null to use the platform default.
   */
  audioBitsPerSecond: number|null|undefined;

  /**
   * The desired bitrate for the video tracks of the recorded stream.
   * Set to null to use the platform default.
   */
  videoBitsPerSecond: number|null|undefined;

  /**
   * The default bitrate for both audio and video tracks of the
   * recorded stream. If this is specified, it will be used in place
   * of audioBitsPerSecond or videoBitsPerSecond if either or both are
   * not specified.
   * Set to null to use the platform default.
   */
  bitsPerSecond: number|null|undefined;

  /**
   * Start recording from the source media stream.
   */
  start(): void;

  /**
   * Stop recording from the source media stream. The result of the
   * recording will be made available as a new value for the data
   * property.
   */
  stop(): void;

  /**
   * Pause recording.
   */
  pause(): void;

  /**
   * Resume recording if paused.
   */
  resume(): void;
  _computeRecorder(stream: any, mimeType: any, audioBps: any, videoBps: any, bps: any): any;
  _computeMimeType(stream: any, mpeg: any, codecs: any): any;
  _recordingChanged(recording: any, recorder: any): void;
  _mimeTypeChanged(mimeType: any): void;
}

interface HTMLElementTagNameMap {
  "app-media-recorder": AppMediaRecorderElement;
}
