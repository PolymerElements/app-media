/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   app-media-image-capture.html
 */

/// <reference path="../polymer/types/polymer.d.ts" />

declare namespace Polymer {

  namespace AppMedia {
  }
}

/**
 * `app-media-image-capture` implements a helpful wrapper element for the emerging
 * [Image Capture API](https://www.w3.org/TR/image-capture/). This element enables
 * straight-forward photographic image control and capture that cooperates nicely
 * with other app-media elements.
 *
 * NOTE: Image Capture API is still under development. As of today (April 7th, 2017),
 * the API requires a polyfill or an
 * [Origin Trial](https://github.com/jpchase/OriginTrials/blob/gh-pages/developer-guide.md).
 * This element will politely neglect to register itself in browsers that do not feature
 * the appropriate ImageRecorder global constructor.
 *
 * Chrome and Firefox have partial support for the API behind flags. See the
 * [ImageCapture API browser support](https://github.com/w3c/mediacapture-image/blob/gh-pages/implementation-status.md)
 * page for details.
 *
 * If you wish to support browsers that do not implement the Image Capture API,
 * please consider including a polyfill such as
 * [this one](https://github.com/GoogleChrome/imagecapture-polyfill) in your app.
 * Note that most polyfills will not enable full functionality, but they should give
 * your app a reasonable fallback in browsers that do not natively support the API.
 *
 * ELEMENT DESIGN NOTE: Many of the properties of this element have a default
 * configuration value of `null`. While this is weird, it is important to keep the
 * behavior of multi-property observers in the element implementation normalized
 * across Polymer 1.x and 2.x. Expect this aspect of the API to change as the
 * element graduates from the current hybrid implementation to something that can
 * rely on Polymer >=2.x observer semantics.
 */
interface AppMediaImageCaptureElement extends Polymer.Element {

  /**
   * The input media stream to capture images from. Note that the
   * stream must have at least one video track in order to be a suitable
   * source for image capture.
   */
  stream: MediaStream|null;

  /**
   * MediaStreams can have multiple video tracks. This property enables
   * you to configure the index of the video track to use.
   */
  trackIndex: number|null|undefined;

  /**
   * The video track selected from the input MediaStream. This track will
   * be the source for any images captured.
   */
  readonly videoTrack: MediaStreamTrack|null;

  /**
   * An ImageCapture instance associated with the selected video track.
   */
  readonly imageCapture: ImageCapture|null;

  /**
   * The last photo captured by the image capture instance.
   */
  readonly lastPhoto: Blob|null;

  /**
   * The last frame grabbed by the image capture instance.
   */
  readonly lastFrame: ImageBitmap|null;

  /**
   * The PhotoCapabilities for the device providing the image data
   * associated with the chosen video track. This object contains
   * information about the minimum, maximum, current and incremental
   * values for various camera settings.
   */
  readonly photoCapabilities: object|null|undefined;

  /**
   * The MediaTrackCapabilities for the device providing the image data
   * associated with the chosen video track. This object contains
   * information about the minimum, maximum, current and incremental
   * values for various camera settings.
   */
  readonly trackCapabilities: object|null|undefined;

  /**
   * The PhotoSettings that will be used to configure the ImageCapture
   * instance used by this element. This configuration is generated
   * based on the individually configured properties on this element.
   * A full list of configurable properties can be found
   * [here](https://w3c.github.io/mediacapture-image/##photosettings-section).
   */
  readonly photoSettings: PhotoSettings;
  fillLightMode: Polymer.AppMedia.FillLightMode|null;
  imageHeight: number|null|undefined;
  imageWidth: number|null|undefined;

  /**
   * Note that red eye reduction may not be controllable. If it is reported as
   * controllable, the value of this property will be respected. Otherwise it
   * will be ignored.
   */
  redEyeReduction: boolean|null|undefined;

  /**
   * The constraints that will be applied to the MediaStreamTrack that
   * is associated with the ImageCapture instance. This configuration is
   * generated based on the individually configured properties on this
   * element. A full list of configurable constraints can be found
   * [here](https://w3c.github.io/mediacapture-image/#constrainable-properties)
   *
   * Note that if a given setting is not supported by the current track, it
   * will be ignored. Also, any constraints that are suported will be clamped
   * to the bounds that are reported by the track PhotoCapabilities instance.
   */
  readonly trackConstraints: MediaTrackConstraints;
  whiteBalanceMode: string|null|undefined;
  colorTemperature: number|null|undefined;
  exposureMode: Polymer.AppMedia.MeteringMode|null;
  exposureCompensation: number|null|undefined;
  iso: number|null|undefined;
  focusMode: Polymer.AppMedia.MeteringMode|null;
  pointsOfInterest: any[]|null|undefined;
  brightness: number|null|undefined;
  contrast: number|null|undefined;
  saturation: number|null|undefined;
  sharpness: number|null|undefined;
  zoom: number|null|undefined;
  torch: boolean|null|undefined;

  /**
   * Take a photo. Returns a promise that resolves a photographic Blob.
   */
  takePhoto(): Promise<Blob>;

  /**
   * Grab a frame from the camera. Returns a promise that resolves an
   * ImageBitmap suitable for drawing to a canvas or used in conjunction
   * with object detection.
   */
  grabFrame(): Promise<ImageBitmap>;
}

interface HTMLElementTagNameMap {
  "app-media-image-capture": AppMediaImageCaptureElement;
}
