/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   app-media-video.html
 */

/// <reference path="../polymer/types/polymer.d.ts" />
/// <reference path="../iron-resizable-behavior/iron-resizable-behavior.d.ts" />

/**
 * `app-media-video` is an element that converts a video source into a nicely
 * scaled video that is displayed to the viewer of the page.
 */
interface AppMediaVideoElement extends Polymer.Element, Polymer.IronResizableBehavior {

  /**
   * The input source for the element. This can be a Media Stream, a
   * Blob or a string URL.
   */
  source: MediaStream|Blob|string|null;

  /**
   * If true, the video will be scaled so that the source video is
   * flush with the edge of the element, but fully contained by it. If
   * false (the default), the video will be scaled to the smallest size
   * that is at full-bleed with respect to the element's bounding box.
   * Both settings preserve the aspect ratio of the source video.
   */
  contain: boolean|null|undefined;

  /**
   * If true, the video will be inverted along the x-axis so that it is
   * effectively mirrored.
   */
  mirror: boolean|null|undefined;

  /**
   * If true, the video is muted.
   */
  muted: boolean|null|undefined;

  /**
   * If true, the video will automatically play when it has a source.
   */
  autoplay: boolean|null|undefined;

  /**
   * If true, the video will loop when it reaches the end of the source.
   */
  loop: boolean|null|undefined;

  /**
   * A bindable reference to the video element that actually plays the
   * source. This is sometimes useful in conjunction with
   * `app-media-audio`, which can accept an HTMLVideoElement as its
   * source.
   */
  readonly videoElement: HTMLVideoElement|null;

  /**
   * A rect-like object that describes the projection of the source
   * video element to the viewport (the bounding box of the
   * app-media-video element).
   *
   * This rectangle is useful to understand the space within the
   * source video element that is visible to the user at any given
   * time. Depending on the value of contain, and also any transforms
   * that affect the scale of the video element, this rectangle could
   * have a range of values that are opportunistically calculated
   * and made available through this property.
   */
  readonly sourceRect: object|null|undefined;

  /**
   * This is the bounding ClientRect of the app-media-video element.
   * This is kept here for easy future access by users of the element
   * and is useful in conjunction with sourceRect.
   */
  readonly viewportRect: ClientRect|null;
  attached(): void;

  /**
   * Play the video.
   */
  play(): void;

  /**
   * Pause the video.
   */
  pause(): void;
  _sourceChanged(): void;
  _updateMetrics(): void;
}

interface HTMLElementTagNameMap {
  "app-media-video": AppMediaVideoElement;
}
